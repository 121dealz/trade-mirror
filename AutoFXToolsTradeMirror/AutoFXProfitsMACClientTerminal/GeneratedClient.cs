/***************************************************************************** 
* Copyright 2016 Aurora Solutions 
* 
*    http://www.aurorasolutions.io 
* 
* Aurora Solutions is an innovative services and product company at 
* the forefront of the software industry, with processes and practices 
* involving Domain Driven Design(DDD), Agile methodologies to build 
* scalable, secure, reliable and high performance products.
* 
* Trade Mirror provides an infrastructure for low latency trade copying
* services from master to child traders, and also trader to different
* channels including social media. It is a highly customizable solution
* with low-latency signal transmission capabilities. The tool can copy trades
* from sender and publish them to all subscribed receiver’s in real time
* across a local network or the internet. Trade Mirror is built using
* languages and frameworks that include C#, C++, WPF, WCF, Socket Programming,
* MySQL, NUnit and MT4 and MT5 MetaTrader platforms.
* 
* Licensed under the Apache License, Version 2.0 (the "License"); 
* you may not use this file except in compliance with the License. 
* You may obtain a copy of the License at 
* 
*    http://www.apache.org/licenses/LICENSE-2.0 
* 
* Unless required by applicable law or agreed to in writing, software 
* distributed under the License is distributed on an "AS IS" BASIS, 
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
* See the License for the specific language governing permissions and 
* limitations under the License. 
*****************************************************************************/


﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace = "http://AutoFXProfitsServer", ConfigurationName = "ITradeMirror", CallbackContract = typeof(ITradeMirrorCallback), SessionMode = System.ServiceModel.SessionMode.Required)]
public interface ITradeMirror
{

    [System.ServiceModel.OperationContractAttribute(Action = "http://AutoFXProfitsServer/ITradeMirror/Subscribe", ReplyAction = "http://AutoFXProfitsServer/ITradeMirror/SubscribeResponse")]
    //bool Subscribe(string userName, string password, int accountID);
    string Subscribe(string userName, string password, int accountID);

    [System.ServiceModel.OperationContractAttribute(Action = "http://AutoFXProfitsServer/ITradeMirror/Unsubscribe", ReplyAction = "http://AutoFXProfitsServer/ITradeMirror/UnsubscribeResponse")]
    bool Unsubscribe(string userName, string password, int accountID);

    [System.ServiceModel.OperationContractAttribute(Action = "http://AutoFXProfitsServer/ITradeMirror/PublishNewSignal", ReplyAction = "http://AutoFXProfitsServer/ITradeMirror/PublishNewSignalResponse")]
    void PublishNewSignal(string signalInformation);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ITradeMirrorCallback
{

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://AutoFXProfitsServer/ITradeMirror/NewSignal")]
    void NewSignal(string signalInformation);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ITradeMirrorChannel : ITradeMirror, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class TradeMirrorClient : System.ServiceModel.DuplexClientBase<ITradeMirror>, ITradeMirror
{

    public TradeMirrorClient(System.ServiceModel.InstanceContext callbackInstance) :
        base(callbackInstance)
    {
    }

    public TradeMirrorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) :
        base(callbackInstance, endpointConfigurationName)
    {
    }

    public TradeMirrorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) :
        base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }

    public TradeMirrorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
        base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }

    public TradeMirrorClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
        base(callbackInstance, binding, remoteAddress)
    {
    }

    //public bool Subscribe(string userName, string password, int accountID)
    //{
    //    return base.Channel.Subscribe(userName, password, accountID);
    //}
    public string Subscribe(string userName, string password, int accountID)
    {
        return base.Channel.Subscribe(userName, password, accountID);
    }

    public bool Unsubscribe(string userName, string password, int accountID)
    {
        return base.Channel.Unsubscribe(userName, password, accountID);
    }

    public void PublishNewSignal(string signalInformation)
    {
        base.Channel.PublishNewSignal(signalInformation);
    }
}
